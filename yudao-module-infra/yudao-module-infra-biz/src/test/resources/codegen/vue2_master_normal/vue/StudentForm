<template>
  <div class="app-container">
    <!-- 对话框(添加 / 修改) -->
    <el-dialog :title="dialogTitle" :visible.sync="dialogVisible" width="45%" v-dialogDrag append-to-body>
      <el-form ref="formRef" :model="formData" :rules="formRules" v-loading="formLoading" label-width="100px">
                    <el-form-item label="名字" prop="name">
                      <el-input v-model="formData.name" placeholder="请输入名字" />
                    </el-form-item>
                    <el-form-item label="简介" prop="description">
                      <el-input v-model="formData.description" type="textarea" placeholder="请输入内容" />
                    </el-form-item>
                    <el-form-item label="出生日期" prop="birthday">
                      <el-date-picker clearable v-model="formData.birthday" type="date" value-format="timestamp" placeholder="选择出生日期" />
                    </el-form-item>
                    <el-form-item label="性别" prop="sex">
                      <el-select v-model="formData.sex" placeholder="请选择性别">
                            <el-option v-for="dict in this.getDictDatas(DICT_TYPE.SYSTEM_USER_SEX)"
                                       :key="dict.value" :label="dict.label" :value="parseInt(dict.value)" />
                      </el-select>
                    </el-form-item>
                    <el-form-item label="是否有效" prop="enabled">
                      <el-radio-group v-model="formData.enabled">
                            <el-radio v-for="dict in this.getDictDatas(DICT_TYPE.INFRA_BOOLEAN_STRING)"
                                      :key="dict.value" :label="dict.value">{{dict.label}}</el-radio>
                      </el-radio-group>
                    </el-form-item>
                    <el-form-item label="头像">
                      <ImageUpload v-model="formData.avatar"/>
                    </el-form-item>
                    <el-form-item label="附件">
                      <FileUpload v-model="formData.video"/>
                    </el-form-item>
                    <el-form-item label="备注">
                      <Editor v-model="formData.memo" :min-height="192"/>
                    </el-form-item>
      </el-form>
                  <!-- 子表的表单 -->
          <el-tabs v-model="subTabsName">
                <el-tab-pane label="学生联系人" name="studentContact">
                  <StudentContactForm ref="studentContactFormRef" :student-id="formData.id" />
                </el-tab-pane>
                <el-tab-pane label="学生班主任" name="studentTeacher">
                  <StudentTeacherForm ref="studentTeacherFormRef" :student-id="formData.id" />
                </el-tab-pane>
          </el-tabs>
      <div slot="footer" class="dialog-footer">
        <el-button type="primary" @click="submitForm" :disabled="formLoading">确 定</el-button>
        <el-button @click="dialogVisible = false">取 消</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
  import * as StudentApi from '@/api/infra/demo'
  import ImageUpload from '@/components/ImageUpload';
  import FileUpload from '@/components/FileUpload';
  import Editor from '@/components/Editor';
          import StudentContactForm from './components/StudentContactForm.vue'
      import StudentTeacherForm from './components/StudentTeacherForm.vue'
  export default {
    name: "StudentForm",
    components: {
          ImageUpload,
          FileUpload,
          Editor,
                               StudentContactForm,
               StudentTeacherForm,
    },
    data() {
      return {
        // 弹出层标题
        dialogTitle: "",
        // 是否显示弹出层
        dialogVisible: false,
        // 表单的加载中：1）修改时的数据加载；2）提交的按钮禁用
        formLoading: false,
        // 表单参数
        formData: {
                            id: undefined,
                            name: undefined,
                            description: undefined,
                            birthday: undefined,
                            sex: undefined,
                            enabled: undefined,
                            avatar: undefined,
                            video: undefined,
                            memo: undefined,
        },
        // 表单校验
        formRules: {
                        name: [{ required: true, message: '名字不能为空', trigger: 'blur' }],
                        description: [{ required: true, message: '简介不能为空', trigger: 'blur' }],
                        birthday: [{ required: true, message: '出生日期不能为空', trigger: 'blur' }],
                        sex: [{ required: true, message: '性别不能为空', trigger: 'change' }],
                        enabled: [{ required: true, message: '是否有效不能为空', trigger: 'blur' }],
                        avatar: [{ required: true, message: '头像不能为空', trigger: 'blur' }],
                        video: [{ required: true, message: '附件不能为空', trigger: 'blur' }],
                        memo: [{ required: true, message: '备注不能为空', trigger: 'blur' }],
        },
                              /** 子表的表单 */
             subTabsName: 'studentContact'
      };
    },
    methods: {
      /** 打开弹窗 */
     open(id) {
        this.dialogVisible = true;
        this.reset();
        const that = this;
        // 修改时，设置数据
        if (id) {
          this.formLoading = true;
          try {
            StudentApi.getStudent(id).then(res=>{
              that.formData = res.data;
              that.title = "修改学生";
            })
          } finally {
            this.formLoading = false;
          }
        }
        this.title = "新增学生";
              },
      /** 提交按钮 */
      submitForm() {
        this.formLoading = true;
        try {
          const that = this;
          let data = this.formData;
          let validate = false;
          // 校验主表
          this.getRef("formRef").validate(valid => {
            validate = valid;
          });
                    // 校验子表
            this.validateSubFrom01().then(() => {
            // 全部校验通过-拼接子表的数据
            // 拼接子表的数据
                data.studentContacts = that.getRef('studentContactFormRef').getData();
                data.studentTeacher = that.getRef('studentTeacherFormRef').getData();
            }).catch((err) => {
                validate = false;
                that.subTabsName = err.replace("FormRef", ""); // 定位到没有校验通过的子表单
            })
          // 所有表单校验通过后方可提交
          if (!validate) {
            return;
          }
          // 修改的提交
          if (data.id) {
                  StudentApi.updateStudent(data).then(response => {
              that.$modal.msgSuccess("修改成功");
              that.dialogVisible = false;
              that.$emit('success');
            });
            return;
          }
          // 添加的提交
          StudentApi.createStudent(data).then(response => {
            that.$modal.msgSuccess("新增成功");
            that.dialogVisible = false;
            that.$emit('success');
          });
        }finally {
          this.formLoading = false;
        }
      },
      getRef(refName){
        return this.$refs[refName];
      },
      /** 校验子表单 */
      validateSubFrom(item) {
        return new Promise((resolve, reject) => {
          this.getRef(item).validate()
          .then(() => {
            resolve();
          })
          .catch(() => {
            reject(item);
          })
        })
      },
      /** 校验所有子表单 */
      validateSubFrom01() {
        // 需要校验的表单 ref
        const validFormRefArr = [
              "studentContactFormRef",
              "studentTeacherFormRef",
        ];
        const validArr = []; // 校验
        for (const item of validFormRefArr) {
          validArr.push(this.validateSubFrom(item));
        }
        return new Promise((resolve, reject) => {
          // 校验所有
          Promise.all(validArr).then(() => {
            resolve();
          }).catch((err) => {
            reject(err);
          })
        })
      },
                      /** 表单重置 */
      reset() {
        this.formData = {
                            id: undefined,
                            name: undefined,
                            description: undefined,
                            birthday: undefined,
                            sex: undefined,
                            enabled: undefined,
                            avatar: undefined,
                            video: undefined,
                            memo: undefined,
        };
        this.resetForm("formRef");
      },
    }
  };
</script>
